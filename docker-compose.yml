version: '3.8'

services:

  # <-------------------------------------- Bases de datos ---------------------------------------------------->

  # Servicio de MongoDB
  # El nombre del base_mongo se debe poner en el link porque eso hace referencia a la dependencia
  # Si no se le pone con ese nombre al momento de querer ejecutar va a dar error en la conexión
  base_mongoDB:
    image: mongo:latest
    container_name: base_mongoDB
    ports:
      - "${PORT_MONGODB}:${PORT_MONGODB}"
    
    restart: always # Reinicio del microservicio en caso de fallo

    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

  base_mysql:
    image: mysql:latest
    container_name: base_mysql
    ports:
      - "3307:${PORT_MYSQL}" # Puerto para conectar MySQL

    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"   # Contraseña del usuario root

    # Se coloca esta parte para que si ocurre un error se reinicie de forma automática
    restart: always # Reinicia automáticamente en caso de error


    volumes:
      - mysql_data:/var/lib/mysql # Volumen persistente para datos
    networks:
      - app-network


  # <-------------------------------------- Microservicios ---------------------------------------------------->

  # Servicio de la verificación en 2 pasos
  verificacion_2pasos:
    build: ./Microservicios/Verificacion_2Pasos
    container_name: verificacion_2pasos
    ports:
      - "${PORT_VERIFICACION_2PASOS}:${PORT_VERIFICACION_2PASOS}"  # Mapeo del puerto 4000
  
    depends_on:
      - base_mongoDB
      - verificacion_whatsapp  # Asegura que el servicio de WhatsApp esté disponible

    environment:
      - MONGO_URI=${URL_MONGODB}  # URL directamente aquí
    
    restart: always # Reinicio del microservicio en caso de fallo

    networks:
      - app-network
    volumes:
      - ./Microservicios/Verificacion_2Pasos:/servidor


  verificacion_whatsapp:
    build: ./Microservicios/Verificacion_Whatsapp
    container_name: verificacion_whatsapp
    ports:
      - "${PORT_VERIFICACION_WHATSAPP}:${PORT_VERIFICACION_WHATSAPP}"

    restart: always # Reinicio del microservicio en caso de fallo

    volumes:
      - ./Microservicios/Verificacion_Whatsapp:/servidor  # Monta el código fuente en el contenedor
    networks:
      - app-network

  
  inicio_sesion:
    build: ./Microservicios/Inicio_Sesion
    container_name: inicio_sesion
    ports:
      - "${PORT_INICIO_SESION}:${PORT_INICIO_SESION}"  # Mapeo del puerto 4000
  
    depends_on:
      - base_mysql

    
    restart: always # Reinicio del microservicio en caso de fallo

    networks:
      - app-network
    volumes:
      - ./Microservicios/Inicio_Sesion:/servidor



  # <-------------------------------------- Frontend ---------------------------------------------------->

  # Servicio del Frontend
  frontend:
    build:
      context: ./Frontend # En donde se encuentra el archivo Dockerfile
    container_name: frontend
    ports:
      - "${PORT_FRONTEND}:${PORT_FRONTEND}"  # Mapea el puerto 3000
    volumes:
      - ./Frontend:/servidor  # Monta el código fuente en el contenedor
    
    restart: always # Reinicio del microservicio en caso de fallo


    depends_on:
      - inicio_sesion # Asegura que el backend se ejecute primero
      - verificacion_2pasos  

    networks:
      - app-network # Si no se coloca en la misma red no van a poder interactuar

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  
  mysql_data:  # Define el volumen faltante
    driver: local
